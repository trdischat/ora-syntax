const vscode = require('vscode');

function activate(context) {

  const keywordHoverMessages = {
    age: { param: 'birth-date', desc: 'Calculates an age and returns the result as a string.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-age', ex: '[Death Date:age:[Birth Date]]' },
    ageDays: { param: 'birth-date', desc: 'Calculates an age and returns the number of days in the result as a string.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-agedays', ex: '[Death Date:ageDays:[Birth Date]]' },
    ageMonths: { param: 'birth-date', desc: 'Calculates an age and returns the number of months in the result as a string.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-agemonths', ex: '[Death Date:ageMonths:[Birth Date]]' },
    ageYears: { param: 'birth-date', desc: 'Calculates an age and returns the number of years in the result as a string.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-ageyears', ex: '[Death Date:ageYears:[Birth Date]]' },
    date: { param: 'f1 : f2 : f3', desc: 'Formats a date value according to one of the given format parameters:<br><i>f1</i>: format for dates with year, month and day<br><i>f2</i>: format for dates with only year and month<br><i>f3</i>: format for dates with only year', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-date', ex: '[Death Date:date:Mmmm d, yyy:Mmmm, yyy:yyy]' },
    dateAdd: { param: 'delta', desc: 'Adds days, months, or years to the current value.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dateadd', ex: '[Date:dateAdd:1d]' },
    dateDay: { param: '', desc: 'Returns the day part of a date, a number from 1 to 31.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dateday', ex: '[Date:dateDay]' },
    dateDifference: { param: 'date', desc: 'Returns the number of days between two dates.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datedifference', ex: '[Death Date:dateDifference:[Burial Date]]' },
    dateGtoJ: { param: '', desc: 'Converts a date from the Gregorian calendar to the Julian calendar.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dategtoj', ex: '[Date:dateGtoJ]' },
    dateJtoG: { param: '', desc: 'Converts a date from the Julian calendar to the Gregorian calendar.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datejtog', ex: '[Date:dateJtoG]' },
    dateJNYD: { param: 'first-month : first-day', desc: 'Does not modify the input value. Sets a temporary value for the Julian New Year\'s Day property, which influences subsequent date conversions in the same template.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datejnyd', ex: '[Date:dateJNYD:1:1][Date:dateJtoG]' },
    dateMDSwap: { param: '', desc: 'Swaps the day and month value if they are ambiguous.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datemdswap', ex: '[Date:dateMDSwap]' },
    dateModifier: { param: '', desc: 'Returns the modifier word part of a date, a value such as "bef", "before", "aft", "after", "ca", "circa", etc.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datemodifier', ex: '[Date:datemodifier]' },
    dateMonth: { param: '', desc: 'Returns the month part of a date, a number from 1 to 12.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datemonth', ex: '[Date:dateMonth]' },
    dateMonthAbbr: { param: '', desc: 'Returns the month part of a date as a month name abbreviation, "Jan", "Feb", etc.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datemonthabbr', ex: '[Date:dateMonthAbbr]' },
    dateMonthName: { param: '', desc: 'Returns the month part of a date as a month name, "January", "February", etc.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datemonthname', ex: '[Date:dateMonthName]' },
    dateQuarter: { param: 'format', desc: 'Parses the input value to extract a quarter value (1,2,3,4) and a year, then formats the result using the default Quarter Date Format or an optional argument to specify the format.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datequarter', ex: '[Quarter:dateQuarter:Sss yyyy]' },
    dateSubtract: { param: 'delta', desc: 'Subtracts days, months, or years from the current value.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datesubtract', ex: '[Date:dateSubtract:1y 1d]' },
    dateYear: { param: 'delta', desc: 'Returns the year part of a date. The <i>delta</i> parameter is optional. If specified, it must be a number of years, positive or negative.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dateyear', ex: '[Date:dateYear:-1]' },
    dayOfWeek: { param: 'version', desc: 'Returns the day of the week for a Gregorian date. The <i>version</i> is either "short", "s", "long", "l", "number", or "n".', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dayofweek', ex: '[Date:dayofweek:s]' },
    dateFrench: { param: '', desc: 'Converts a date that uses French month names/abbreviations to English and formats it according to the default date format.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datefrench', ex: '[Date de Naissance:dateFrench]' },
    dateGerman: { param: '', desc: 'Converts a date that uses German month names/abbreviations to English and formats it according to the default date format.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dategerman', ex: '[Geburtsdatum:dateGerman]' },
    dateItalian: { param: '', desc: 'Converts a date that uses Italian month names/abbreviations to English and formats it according to the default date format.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-dateitalian', ex: '[Data di Nascita:dateItalian]' },
    dateSpanish: { param: '', desc: 'Converts a date that uses Spanish month names/abbreviations to English and formats it according to the default date format.', url: 'https://www.ora-extension.com/en/transforms-date.htm#transform-datespanish', ex: '[Fecha de Nacimiento:dateSpanish]' },
    attribute: { param: 'selector : index : attribute-name', desc: 'Returns the value of the HTML attribute with the given <i>attribute-name</i> from the <i>index</i>th HTML element that matches the <i>selector</i>. All the parameters are required.', url: 'https://www.ora-extension.com/en/transforms-dom.htm#transform-attribute', ex: '[DOM:attribute:a:1:href]' },
    query: { param: 'selector : index', desc: 'Returns the text of the <i>index</i>th HTML element that matches the <i>selector</i>. If the optional <i>index</i> is not supplied, it returns the text of the first matching element using its textContent property.', url: 'https://www.ora-extension.com/en/transforms-dom.htm#transform-query', ex: '[DOM:query:h2:2]' },
    queryInner: { param: 'selector : index', desc: 'Returns the text of the <i>index</i>th HTML element that matches the <i>selector</i>. If the optional <i>index</i> is not supplied, it returns the text of the first matching element using its innerText property.', url: 'https://www.ora-extension.com/en/transforms-dom.htm#transform-queryinner', ex: '[DOM:queryInner:h2:2]' },
    queryValue: { param: 'selector : index', desc: 'Returns the value of the <i>index</i>th HTML input element that matches the <i>selector</i>. If the optional <i>index</i> is not supplied, it returns the value of the first matching element.', url: 'https://www.ora-extension.com/en/transforms-dom.htm#transform-queryvalue', ex: '[DOM:queryValue:input[type=text]]' },
    capitalize: { param: '', desc: 'Changes the first letter of words in the value to uppercase, and the remaining letters in the words to lowercase.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-capitalize', ex: '[City:capitalize]' },
    initialCapital: { param: '', desc: 'Changes the first letter of the first word in the value to uppercase, and the remaining letters in the value to lowercase.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-initialcapital', ex: '[City:initialCapital]' },
    isLowerCase: { param: '', desc: 'Returns true if the value contains no uppercase characters. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-islowercase', ex: '<[Surname:isLowerCase][Surname:uppercase]|[Surname]>' },
    isMixedCase: { param: '', desc: 'Returns true if the value contains uppercase and lowercase letters. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-ismixedcase', ex: '<[Surname:isMixedCase][Surname:uppercase]|[Surname]>' },
    isUpperCase: { param: '', desc: 'Returns true if the value contains no lowercase characters. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-isuppercase', ex: '<[Surname:isUpperCase][Surname:lowercase]|[Surname]>' },
    lowercase: { param: '', desc: 'Changes the letters in the value to lowercase.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-lowercase', ex: '[City:lowercase]' },
    uppercase: { param: '', desc: 'Changes the letters in the value to uppercase.', url: 'https://www.ora-extension.com/en/transforms-letter-case.htm#transform-uppercase', ex: '[City:uppercase]' },
    mathAbs: { param: '', desc: 'Returns the absolute value of a number.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathabs', ex: '[Difference:mathAbs]' },
    mathAdd: { param: 'number', desc: 'Adds a <i>number</i> to the value.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathadd', ex: '[ImageNumber:mathAdd:1]' },
    mathCeiling: { param: '', desc: 'Rounds the value to the smallest integer greater than or equal to the value.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathceiling', ex: '[Age:mathCeiling]' },
    mathDivide: { param: 'divisor', desc: 'Divides the value by the given <i>divisor</i>.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathdivide', ex: '[Weeks:mathDivide:4]' },
    mathFloor: { param: '', desc: 'Rounds the value to the largest integer less than or equal to the value.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathfloor', ex: '[Age:mathFloor]' },
    mathMultiply: { param: 'factor', desc: 'Multiplies the value by the given <i>factor</i>.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathmultiply', ex: '[Weeks:mathMultiply:7]' },
    mathRound: { param: '', desc: 'Rounds the value to the nearest integer.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathround', ex: '[Age:mathRound]' },
    mathSubtract: { param: 'number', desc: 'Subtracts a <i>number</i> from the value.', url: 'https://www.ora-extension.com/en/transforms-math.htm#transform-mathsubtract', ex: '[ImageNumber:mathSubtract:1]' },
    namePrefix: { param: '', desc: 'Returns the prefix of a name; i.e., the honorific or title that appears before the given name, if any.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-nameprefix', ex: '[Name:namePrefix]' },
    namePrefixRaw: { param: '', desc: 'Returns the prefix of a name, without modification; i.e., the honorific or title that appears before the given name, if any.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-nameprefixraw', ex: '[Name:namePrefixRaw]' },
    nameGiven: { param: '', desc: 'Returns the givenname part of a name; i.e., the portion of the name between the prefix and the surname.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-namegiven', ex: '[Name:nameGiven]' },
    nameGivenRaw: { param: '', desc: 'Returns the givenname part of a name; i.e., the portion of the name between the prefix and the surname.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-namegivenraw', ex: '[Name:nameGivenRaw]' },
    nameSurname: { param: '', desc: 'Returns the surname part of a name; i.e., usually the last word in the full name before a comma, if any.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-namesurname', ex: '[Name:nameSurname]' },
    nameSurnameRaw: { param: '', desc: 'Returns the surname part of a name, without modification; i.e., usually the last word in the full name before a comma, if any.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-namesurnameraw', ex: '[Name:nameSurnameRaw]' },
    nameSuffix: { param: '', desc: 'Returns the suffix of a name; i.e, typically any value following the first comma in the full name value.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-namesuffix', ex: '[Name:nameSuffix]' },
    nameSuffixRaw: { param: '', desc: 'Returns the suffix of a name, without modification; i.e, typically any value following the first comma in the full name value.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-namesuffixraw', ex: '[Name:nameSuffixRaw]' },
    nameToGivenFirst: { param: '', desc: 'For names in "surname, givenname" format, transforms the name into a "givenname surname" format.', url: 'https://www.ora-extension.com/en/transforms-name.htm#transform-nametogivenfirst', ex: '[Name:nameToGivenFirst]' },
    placeDetail: { param: 'place-parameters', desc: 'Extracts the detail (street address, apartment number, or other text before the city name) from a place value.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placedetail', ex: '[Residence:placeDetail]' },
    placeCity: { param: 'place-parameters', desc: 'Extracts the city (or town or village) name from a place value.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placecity', ex: '[Residence:placeCity]' },
    placeCounty: { param: 'place-parameters : prefix-or-suffix : prefix-or-suffix', desc: 'Extracts the county or district name from a place value. placeDistrict is a synonym for PlaceCounty.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placecounty', ex: '[Residence:placeCounty:us:Co.:Par.]' },
    placeDistrict: { param: 'place-parameters : prefix-or-suffix : prefix-or-suffix', desc: 'Extracts the county or district name from a place value. placeDistrict is a synonym for PlaceCounty.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placedistrict', ex: '[Residence:placeDistrict:uk]' },
    placeState: { param: 'place-parameters', desc: 'Extracts the state name from a place value. placeProvince is a synonym for PlaceState.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placestate', ex: '[Residence:placeState:us:a]' },
    placeProvince: { param: 'place-parameters', desc: 'Extracts the province name from a place value. placeProvince is a synonym for PlaceState.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placeprovince', ex: '[Residence:placeProvince:ca]' },
    placeCountry: { param: 'place-parameters', desc: 'Extracts the country name from a place value.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placecountry', ex: '[Residence:placeCountry:d]' },
    placePostalCode: { param: 'place-parameters', desc: 'Extracts the postal code from a place value.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placepostalcode', ex: '[Residence:placePostalCode:us]' },
    placeHasDetail: { param: 'place-parameters', desc: 'Returns true if the place detail is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehasdetail', ex: '[Residence:placeHasDetail]' },
    placeHasCity: { param: 'place-parameters', desc: 'Returns true if the city is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehascity', ex: '[Residence:placeHasCity]' },
    placeHasCounty: { param: 'place-parameters', desc: 'Returns true if the county is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehascounty', ex: '[Residence:placeCounty]' },
    placeHasDistrict: { param: 'place-parameters', desc: 'Returns true if the district is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehasdistrict', ex: '[Residence:placeHasDistrict]' },
    placeHasState: { param: 'place-parameters', desc: 'Returns true if the state is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehasstate', ex: '[Residence:placeHasState]' },
    placeHasProvince: { param: 'place-parameters', desc: 'Returns true if the province is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehasprovince', ex: '[Residence:placeHasProvince]' },
    placeHasCountry: { param: 'place-parameters', desc: 'Returns true if the country is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehascountry', ex: '[Residence:placeHasCountry]' },
    placeHasPostalCode: { param: 'place-parameters', desc: 'Returns true if the postal code is not empty. Otherwise, it returns false.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placehaspostalcode', ex: '[Residence:placeHasPostalCode]' },
    placeAddCountry: { param: 'place-parameters', desc: 'Appends the country name to a place value if (1) the place value does not have a country value and (2) the country can be derived.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placeaddcountry', ex: '[Residence:placeAddCountry]' },
    placeLocale: { param: 'place-parameters', desc: 'Returns the locale used by ORA when parsing a place.', url: 'https://www.ora-extension.com/en/transforms-place.htm#transform-placelocale', ex: '[Residence:placeLocale]' },
    abbr: { param: 'tableName', desc: 'Converts the input value to an abbreviation using a specified lookup table.', url: 'https://www.ora-extension.com/en/transforms-table-lookup.htm#transform-abbr', ex: '[State:abbr:us_states]' },
    abbrSplit: { param: 'tableName : separator', desc: 'Splits the input field into substrings and searches for a substring it can convert to an abbreviation.', url: 'https://www.ora-extension.com/en/transforms-table-lookup.htm#transform-abbrsplit', ex: '[Place:abbrSplit:us_states:,]' },
    full: { param: 'tableName', desc: 'Changes the input value from an abbreviation to the full value using a specified lookup table.', url: 'https://www.ora-extension.com/en/transforms-table-lookup.htm#transform-full', ex: '[State:full:us_states]' },
    fullSplit: { param: 'tableName : separator', desc: 'Splits the input field into substrings and searches for a substring it can convert from an abbreviation to a full value.', url: 'https://www.ora-extension.com/en/transforms-table-lookup.htm#transform-fullsplit', ex: '[Place:fullSplit:us_states:,]' },
    lookup: { param: 'tableName', desc: 'Changes the input value from its initial value to a replacement value found in the given table.', url: 'https://www.ora-extension.com/en/transforms-table-lookup.htm#transform-lookup', ex: '[Source.Year:lookup:us_federal_year_to_nara_series]' },
    lookupSplit: { param: 'tableName : separator', desc: 'Splits the input field into substrings and searches for a substring it can convert to a replacement value.', url: 'https://www.ora-extension.com/en/transforms-table-lookup.htm#transform-lookupsplit', ex: '[Source.Year:lookupSplit:us_federal_year_to_nara_series: ]' },
    append: { param: 'text', desc: 'Returns the input value with <i>text</i> concatenated as a suffix.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-append', ex: '[Place:append:, Massachusetts]' },
    extract: { param: 'pattern : flags', desc: 'Extracts the first substring from the value that matches the Regular Expression specified in the <i>pattern</i> parameter. If the optional <i>flags</i> parameter is not provided, it defaults to "gi".', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-extract', ex: '[Name:extract:"([^"]+)"]' },
    extractIndex: { param: 'pattern : index : flags', desc: 'Extracts the <i>index</i>th substring from the value that matches the Regular Expression specified in the <i>pattern</i> parameter. If the optional <i>flags</i> parameter is not provided, it defaults to "gi".', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-extractindex', ex: '[Place:extractIndex:\(([^\)]+)\):2]' },
    hrefToUrl: { param: '', desc: 'Converts an HREF value, which may be a relative URL, into a full URL, which will be an absolute URL.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-hreftourl', ex: '[Image.URL:hrefToUrl]' },
    initials: { param: '', desc: 'Returns the first letter of each word in the value followed by a period and a space.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-initials', ex: '[GivenName:initials]' },
    length: { param: '', desc: 'Returns the length of the value.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-length', ex: '[Notes:length]' },
    numberToWords: { param: '', desc: 'For numeric values less than 999,999, transforms the value from digits to words.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-numbertowords', ex: '[Age:numberToWords]' },
    padLeft: { param: 'length : padString', desc: 'Pads to the left (start) of the current string with the <i>padString</i> (repeated, if needed) so that the resulting string reaches a given <i>length</i>.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-padleft', ex: '[Enumeration District:padLeft:4:0]' },
    padRight: { param: 'length : padString', desc: 'Pads to the right (end) of the current string with the <i>padString</i> (repeated, if needed) so that the resulting string reaches a given <i>length</i>.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-padright', ex: '[Sheet:padRight:4:*]' },
    plural: { param: 'one : many : zero', desc: 'Returns one of three text values based on the numeric value of the given variable:<br><i>one</i>: 1 or -1<br><i>many</i>: not 1, -1 or 0<br><i>zero</i>: 0 .', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-plural', ex: '[Children:plural:child:children:children]' },
    prepend: { param: 'text', desc: 'Returns the input value with <i>text</i> concatenated as a prefix.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-prepend', ex: '[Place:prepend:City is ]' },
    replace: { param: 'pattern : newText : flags OR oldText : newText : options', desc: 'Replace has two modes of operation, Regular Expression mode (default) and Literal mode. Include the <i>option</i> character "l" to select Literal mode.<ul><li>In Regular Expression mode, replace uses the <i>pattern</i> to identify a substring in the current value and replaces the substring with <i>newText</i>.</li><li>In Literal mode, replace changes <i>oldText</i> to <i>newText</i> in the current value.</li></ul>', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-replace', ex: '[Occupation:replace:\s:_] or [Occupation:replace:(sic):[sic]:l]' },
    reverse: { param: 'separator', desc: 'Splits the field value into parts using the <i>separator</i> to divide the parts and returns a text value with the parts in reverse sequence.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-reverse', ex: '[Place:reverse:, ]' },
    split: { param: 'separator : index', desc: 'Splits the field value into parts using the <i>separator</i> to divide the parts and returns the part indicated by the <i>index</i> number.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-split', ex: '[Place:split:,:-1]' },
    splitCount: { param: 'separator', desc: 'Splits the field value into parts using the <i>separator</i> to divide the parts and returns the number of parts.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-splitcount', ex: '[Place:splitCount:,]' },
    splitLines: { param: 'index', desc: 'Splits the field value into lines and returns the line indicated by the <i>index</i> number.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-splitlines', ex: '[Text:splitLines:3]' },
    splitLinesCount: { param: '', desc: 'Splits the field value into lines and returns the number of lines.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-splitlinescount', ex: '[Text:splitLinesCount]' },
    substring: { param: 'indexStart : indexEnd', desc: 'Extracts a subset of characters from a value.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-substring', ex: '[Text:substring:2:3]' },
    urlParameter: { param: '', desc: 'Returns the input value encoded for use in a URL.', url: 'https://www.ora-extension.com/en/transforms-text.htm#transform-urlparameter', ex: '[Place:urlParameter]' },
  };
  
  context.subscriptions.push(
    vscode.languages.registerHoverProvider('ora-template', {
      provideHover(document, position) {
        const range = document.getWordRangeAtPosition(position);
        if (range) {
          const word = document.getText(range);
          if (keywordHoverMessages.hasOwnProperty(word)) {
            const hoverString = '<p><code><b><a href="'
                              + keywordHoverMessages[word].url 
                              + '">' 
                              + word
                              + '</a></b>' 
                              + ( keywordHoverMessages[word].param ? (' : <i>' + keywordHoverMessages[word].param + '</i>') : '') 
                              + '</code></p><p>' 
                              + keywordHoverMessages[word].desc
                              + ( keywordHoverMessages[word].ex ? ('</p><p>Example: <code>' + keywordHoverMessages[word].ex + '</code>') : '')
                              + '</p>';
            const markdownString = new vscode.MarkdownString(hoverString);
            markdownString.isTrusted = true;
            markdownString.supportHtml = true;
            return new vscode.Hover(markdownString);
          }
        }
        return null;
      }
    })
  );
}

exports.activate = activate;